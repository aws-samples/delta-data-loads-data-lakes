{
    "Comment": "Data Pipeline to perform change data capture (CDC)",
    "StartAt": "Create Replication Instance",
    "States": {
      "Create Replication Instance": {
        "Type": "Task",
        "Resource": "${retlLambdaCreateReplicationInstanceArn}",
        "Next": "Replication Instance Creation Status?"
      },
      "Replication Instance Creation Status?": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.createStatus",
            "StringEquals": "FAILED",
            "Next": "Send Completion Message"
          }
        ],
        "Default": "Wait for Testing Replication Instance Connection"
      },
      "Wait for Testing Replication Instance Connection": {
        "Type": "Wait",
        "Seconds": 60,
        "Next": "Test Replication Instance Connection"
      },
      "Test Replication Instance Connection": {
        "Type": "Task",
        "Resource": "${retlLambdaTestReplicationInstanceConnectionArn}",
        "Next": "Test Replication Instance Connection status?"
      },
      "Test Replication Instance Connection status?": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.result",
            "StringEquals": "FAILED",
            "Next": "Delete Replication Instance"
          }
        ],
        "Default": "MapTabletoStep"
      },
      "MapTabletoStep": {
        "Type": "Map",
        "MaxConcurrency": 2,
        "ResultPath": null,
        "ItemsPath": "$.TableNames",
        "Parameters": {
          "DYNAMODB_KEY.$": "$$.Map.Item.Value",
          "replicationInstanceArn.$": "$.replicationInstanceArn"
        },
        "Iterator": {
           "StartAt": "Update start value for table",
           "States": {
             "Create DMS Task for table": {
       "Type": "Task",
       "Resource": "${rCreateReplicationTaskForTableArn}",
       "Next": "Wait for DMS Task Creation"
      },
      "Update start value for table": {
       "Type": "Task",
       "Resource": "${retlLambdaUpdateLoadStartValueArn}",
       "Next": "Start Value Updated?"
        },
      "Wait for DMS Task Creation": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "DMS Task created?"
    },
      "DMS Task created?": {
       "Type": "Choice",
       "Choices": [
                      {
                        "Variable": "$.result",
                        "StringEquals": "FAILED",
                        "Next": "Record Failure"
                      },
                      {
                        "Variable": "$.result",
                        "StringEquals": "SUCCEEDED",
                        "Next": "Start DMS Task"
                      }
                    ],
       "Default": "Wait for DMS Task Creation"
     },
      "Start Value Updated?": {
               "Type": "Choice",
               "Choices": [
                 {
                   "Variable": "$.result",
                   "StringEquals": "FAILED",
                   "Next": "Record Failure"
                 },
                 {
                   "Variable": "$.result",
                   "StringEquals": "SUCCEEDED",
                   "Next": "Create DMS Task for table"
                 }
               ],
               "Default": "Create DMS Task for table"
             },
      "Start DMS Task": {
        "Type":"Task",
        "Resource": "${rLambdaStartDMSforCDCArn}",
        "Next": "Wait for DMS"
      },
    "Wait for DMS": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "Check DMS Task Status"
    },
    "Check DMS Task Status": {
      "Type": "Task",
      "Resource": "${rLambdaCheckCDCDMSArn}",
      "Next": "Task Complete?"
    },
     "Task Complete?": {
       "Type": "Choice",
       "Choices": [
                      {
                        "Variable": "$.result",
                        "StringEquals": "FAILED",
                        "Next": "Delete Task on Failure"
                      },
                      {
                        "Variable": "$.result",
                        "StringEquals": "SUCCEEDED",
                        "Next": "Delete DMS Task"
                      },
                      {
                        "Variable": "$.result",
                        "StringEquals": "RUNNING",
                        "Next": "Wait for DMS"
                      }
                    ],
       "Default": "Wait for DMS"
     },
             "Delete Task on Failure": {
               "Type": "Task",
               "Resource": "${rLambdaDeleteDMSArn}",
               "Next": "Record Failure"
             },
      "Copy Files to destination": {
       "Type": "Task",
       "Resource": "${rLambdaCopyCDCtoProcessedArn}",
       "Next": "File copy complete?"
      },
       "File copy complete?": {
       "Type": "Choice",
       "Choices": [
                      {
                        "Variable": "$.result",
                        "StringEquals": "FAILED",
                        "Next": "Record Failure"
                      },
                      {
                        "Variable": "$.result",
                        "StringEquals": "SUCCESS",
                        "Next": "Record Success"
                      }
                    ],
       "Default": "Record Failure"
     },

    "Record Success": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "ResultPath": null,
       "Parameters": {
         "Message": {
       "Input": "Data Pipeline Succssful!"
     },
     "TopicArn": "${rSNSDataPipelineCDCArn}"
     },
       "End": true

    },
    "Delete DMS Task": {
      "Type": "Task",

        "Resource": "${rLambdaDeleteDMSArn}",
       "Next": "Copy Files to destination"
    },
     "Record Failure": {
       "Type": "Task",
       "Resource": "arn:aws:states:::sns:publish",
       "ResultPath": null,
       "Parameters": {
         "Message": "Data Pipeline Failed",

         "TopicArn": "${rSNSDataPipelineCDCArn}"
       },
      "End": true
       }
           }

    },
         "Next": "Delete Replication Instance"
    },
      "Delete Replication Instance": {
        "Type": "Task",
        "Resource": "${retlLambdaDeleteReplicationInstanceArn}",
        "Next": "Send Completion Message"
      },
      "Send Completion Message": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
       "Parameters": {
         "Message": {
           "Input": "$.createStatus"
     },
     "TopicArn": "${rSNSDataPipelineCDCArn}"
     },
     "End": true
    }
      }
}
